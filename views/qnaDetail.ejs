<!DOCTYPE html>
<html lang="ko">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <link rel="icon" href="/images/7Tf1NS6R.ico" type="image/x-icon" sizes="32x32">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
  <link rel="stylesheet" href="/css/qnaDetail.css">
  <link rel="stylesheet" href="/css/main.css" />

  <title>게시글 상세 조회</title>
</head>
<title>Q&A</title>
</head>

<body>
  <!-- header -->
  <header>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <div class="container-lg">
        <a class="navbar-brand" href="/"><img class="logo__img" src="/images/logo-removebg.png" alt="logo"></a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown"
          aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavDropdown">
          <ul class="navbar-nav me-auto">
            <li class="nav-item">
              <a class="nav-link walk" aria-current="page" onclick="authenticate()">산책친구 찾기</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/share">강아지 자랑</a>
            </li>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/hospital">동물병원 찾기</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/boards/qna">Q&A 게시판</a>
            </li>
          </ul>
          <hr class="d-lg-none">

          <div class="d-lg-none ">
            <a class="btn btn_my" href="/mypage">마이페이지</a>
            <button class="btn btn_log" data-bs-toggle="modal" data-bs-target="#exampleModal-log" id="loginBtnSmall"
              type="button">로그인</button>
            <button class="btn btn_log" id="logoutBtnSmall" type="button" onclick="logout()">로그아웃</button>
          </div>

          <div class="myLog d-none d-lg-flex"> <!-- Only display on large screens -->
            <a class="btn btn_my" href="/mypage">마이페이지</a>
            <button class="btn btn_log" data-bs-toggle="modal" data-bs-target="#exampleModal-log" id="loginBtnLarge"
              type="button">로그인</button>
            <button class="btn btn_log" id="logoutBtnLarge" type="button" onclick="logout()">로그아웃</button>
          </div>

        </div>
      </div>
    </nav>

    <div class="modal fade" id="exampleModal-log" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="background-color: #F4E0D6;">
          <div class="modal-header text-center">
            <div class="modal-title fs-5" id="exampleModalLabel">로그인</div>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="login-form">
              <div class="mb-3">
                <label for="userid" class="form-label">아이디</label>
                <input type="text" class="form-control" id="userid" style="background-color: #F4E0D6;" value="user1">
              </div>
              <div class="mb-3">
                <label for="pw" class="form-label">비밀번호</label>
                <input type="password" class="form-control" id="pw" style="background-color: #F4E0D6;" value="user1">
              </div>
              <div class="text-center">
                <button type="button" class="btn btn-primary" onclick="signin()"
                  style="background-color:#DBC2BD; border: none;">로그인</button>
                <button type="button" class="btn btn-primary" onclick="signup()"
                  style="background-color:#DBC2BD; border: none;">회원가입</button>
                <button type="button" class="btn btn-secondary me-3" data-bs-dismiss="modal"
                  style="background-color:#DBC2BD; border: none;">Close</button> <!-- 회원가입 버튼 추가 -->
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </header>
  <script src="/js/header.js"></script>

  <div class="container">
    <h1>Q&A</h1>
    <div class="d-flex justify-content-between align-items-center">
      <div>
        <button style="background-color: #f9c8af; border: #f4e0d6; color: black;" id="editBtn " class="btn btn-primary"
          type="button" onclick="edit()">수정</button>
        <button style="background-color: #f9c8af; border: #f4e0d6; color: black;" id="deleteBtn" class="btn btn-danger"
          type="button" onclick="deleteBoards()">삭제</button>
      </div>
      <div class="writer">
        <label for="writer">작성자</label>
        <input type="text" id="writer" class="form-control" value="<%=data.writer%>" readonly>
      </div>
    </div>
    <label for="title">제목</label>
    <input type="text" id="title" class="form-control" value="<%=data.title%>"><br>
    <label for="contents">내용</label><br>
    <textarea id="contents" class="form-control" rows="10"><%=data.contents%></textarea>
    <button style=" margin-top: 5px; background-color: #f9c8af; border: #f4e0d6; color: black;" type="button"
      onclick="location.href='/boards/qna'">목록으로</button>
  </div>
  <div class="toggleBtn_listBtn">
    <button style="background-color: #f9c8af; border: #f4e0d6; color: black;" id="toggleCommentButton"
      class="btn btn-primary" onclick="toggleCommentForm()">댓글 보기</button>
  </div>
  <div id="comment-container" class="comment-container"><br>
    <!-- <div class="comment-list"></div> -->
    <input type="hidden" id="boardtype" value="qna" />
    <input type="hidden" id="id" value="<%=data.id%>" />
    <input type="hidden" id="writer_other" value="<%=data.writer%>" readonly>
    <div class="form-group">
      <label for="comment-content">댓글</label><br>
      <textarea id="comment-content" class="form-control" rows="4" placeholder="댓글을 입력하세요"></textarea>
      <button class="btn btn-primary" onclick="postComment()">댓글 작성</button>
      <div id="commentarea"></div>
    </div>
  </div>
  </div>







</body>

<script>


  // script start


  window.onload = function () {
    const loginbuttonSmall = document.querySelector("#loginBtnSmall");
    const logoutbuttonSmall = document.querySelector("#logoutBtnSmall");
    const loginbuttonLarge = document.querySelector("#loginBtnLarge");
    const logoutbuttonLarge = document.querySelector("#logoutBtnLarge");

    const token = localStorage.getItem("token");

    if (token) {
      loginbuttonSmall.style.display = "none";
      logoutbuttonSmall.style.display = "block";
      loginbuttonLarge.style.display = "none";
      logoutbuttonLarge.style.display = "block";
    } else {
      loginbuttonSmall.style.display = "block";
      logoutbuttonSmall.style.display = "none";
      loginbuttonLarge.style.display = "block";
      logoutbuttonLarge.style.display = "none";
    }
  };

  function signup() {
    window.location.href = "/signup";
  }

  function authKaKao() {
    document.location.href = "/signup/kakao";
  }

  async function signin() {
    const userid = document.querySelector("#userid").value;
    const pw = document.querySelector("#pw").value;
    const loginbutton = document.querySelector("#loginBtn");
    const logoutbutton = document.querySelector("#logoutBtn");
    const data = {
      userid,
      pw,
    };

    try {
      const res = await axios({
        method: "POST",
        url: "/login",
        data,
      });
      console.log(res.data);
      if (res.data.result) {
        // localStorage.setItem(`${res.data.userinfo.userid}`, res.data.token);
        localStorage.setItem(`token`, res.data.token);
        alert(`${res.data.userinfo.name}님 로그인 성공`);
        window.location.reload();
      } else {
        alert(`${res.data.message}`);
        document.location.reload();
      }
    } catch (error) {
      console.log(error);
    }
  }
  async function logout() {
    window.localStorage.clear();
    const loginbutton = document.querySelector("#loginBtn");
    const logoutbutton = document.querySelector("#logoutBtn");
    document.location.href = "/";
  }


  function scrollToTop() {
    window.scrollTo({
      top: 0,
      behavior: "smooth" // 부드러운 스크롤 효과를 사용하려면 "smooth"를 설정합니다.
    });
  }
  // script end


  // 댓글 입력 폼을 토글하는 함수
  function toggleCommentForm() {
    var commentContainer = document.querySelector('#commentarea');
    var commentContainers = document.querySelector("#comment-container");
    if (commentContainer.style.display === 'none' || commentContainer.style.display === '' || commentContainers.style.display === 'none' || commentContainers.style.display === '') {
      commentContainer.style.display = 'block';
      commentContainers.style.display = 'block';
    } else {
      commentContainer.style.display = 'none';
      commentContainers.style.display = 'none';
    }
  }
  // 스크롤 대상 엘리먼트
  var commentContainer = document.querySelector("#comment-container");

  // 주기적으로 스크롤 대상 업데이트
  setInterval(function () {
    commentContainer = document.querySelector("#comment-container");
  }, 1000);

  // 스크롤 부드럽게 이동하는 함수
  function scrollToCommentContainer() {
    if (commentContainer) {
      commentContainer.scrollIntoView({ behavior: "smooth" });
    }
  }
  document.getElementById("toggleCommentButton").addEventListener("click", scrollToCommentContainer);

  const token = localStorage.getItem('token');
  const writer = document.querySelector('#writer').value;
  const editBtn = document.getElementById("editBtn");
  const deleteBtn = document.getElementById("deleteBtn");
  const data = { token, writer };
  axios({
    method: 'POST',
    url: '/boards/verify',
    data
  }).then((res) => {
    console.log(res);
    if (!res.data.data) {
      editBtn.style.display = 'none';
      deleteBtn.style.display = 'none';
    }
  });
  axios({
    method: 'GET',
    url: `/boards/comment/${document.getElementById("id").value}`
  }).then(res => {
    console.log(res.data);
    const commentarea = document.querySelector('#commentarea'); // 댓글을 표시할 요소 선택
    res.data.comments.forEach(value => {
      const paragraph = document.createElement('p'); // <p> 요소 생성
      paragraph.textContent = `${value.writerid}님의 댓글: ${value.content}`;
      commentarea.appendChild(paragraph); // 각 댓글을 별도의 <p> 요소로 추가
    });
  });
  async function edit() {
    const id = document.getElementById("id").value;
    const title = document.getElementById("title").value;
    const contents = document.getElementById("contents").value;
    console.log(id);
    console.log(title);
    console.log(contents);
    try {
      if (!confirm("수정 하시겠습니까?")) {
        return;
      }
      const data = {
        id: Number(id),
        title: title,
        contents: contents,
      };
      const res = await axios({
        method: "PATCH",
        url: `/boards/qna/${id}`,
        data,
      });
      if (res.data.data) {
        alert(`${res.data.message}`);
        document.location.href = '/boards/qna';
      }
    } catch (error) {
      console.error(error);
      alert("수정 중 오류가 발생했습니다.");
    }
  }

  async function deleteBoards() {
    const id = document.getElementById("id").value;
    const data = { id };

    if (!confirm("삭제 하시겠습니까?")) {
      return;
    }

    try {
      const res = await axios({
        method: "DELETE",
        url: `/boards/qna/${id}`,
        data
      });
      console.log(res.data);
      if (res.data.data) {
        alert("삭제가 완료되었습니다.");
        document.location.href = '/boards/qna';
        return;
      }
    } catch (error) {
      console.error(error);
      alert("삭제 중 오류가 발생했습니다.");
      document.location.href = '/boards/qna';
      return;
    }
  }

  async function verify(writer) {
    const token = window.localStorage.getItem('token');
    //const id=document.querySelector('#writer')
    const data = {
      token, writer
    };
    try {
      const res = await axios({
        method: 'POST',
        url: "/boards/verify",
        data
      });
      console.log(res.data.data);
      if (!res.data.data) {
        alert(`${res.data.message}`);
        document.location.href = '/boards/qna';
      }

    } catch (error) {

    }
  }
  const b_t = document.querySelector('#boardtype');
  const writer_other = document.querySelector('#writer_other');
  const contents = document.querySelector('#comment-content');
  const commentarea = document.querySelector('#commentarea');
  const div = document.createElement('div');
  div.style.whiteSpace = 'pre-wrap';
  async function postComment() {
    const id = document.getElementById("id").value;
    const commentContent = contents.value.trim();
    console.log(b_t, writer, contents);
    if (!commentContent.trim()) { // 댓글 내용이 비어있을 때
      alert('댓글을 입력하세요.');
      return;
    }
    const data = {
      writerid: writer_other.value,
      content: contents.value,
      boardtype: b_t.value,
      id
    };
    try {
      const res = await axios({
        method: 'POST',
        url: '/boards/comment/',
        data
      });
      if (res.data.data) {
        div.textContent += `${res.data.id}님의 댓글:${res.data.contents}\n`;
        commentarea.append(div);
        contents.value = '';
        location.reload();
      }

    } catch (error) {
      console.log(error);
    }
  }
</script>

</html>