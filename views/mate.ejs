<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>산책메이트</title>
    <!-- favicon -->
    <link rel="icon" href="../images/HotDog-Logo.png" type="image/x-icon" sizes="32x32">
    <!-- socket.io -->
    <script src="socket.io/socket.io.js"></script>
    <!-- axios -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- bootstrap icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    <!-- css -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
    <link rel="stylesheet" href="../css/mainPage.css" />
    <link rel="stylesheet" href="../css/main.css" />
    <link rel="stylesheet" href="../css/mate.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.10/dayjs.min.js"
        integrity="sha512-FwNWaxyfy2XlEINoSnZh1JQ5TRRtGow0D6XcmAWmYCRgvqOUTnzCxPc9uF35u5ZEpirk1uhlPVA19tflhvnW1g=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.10/locale/ko.min.js"
        integrity="sha512-ycjm4Ytoo3TvmzHEuGNgNJYSFHgsw/TkiPrGvXXkR6KARyzuEpwDbIfrvdf6DwXm+b1Y+fx6mo25tBr1Icg7Fw=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <title>Walking Mate</title>
</head>

<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container-lg">
                <a class="navbar-brand" href="/"><img class="logo__img" src="/images/logo-removebg.png" alt="logo"></a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                    data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false"
                    aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNavDropdown">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link walk" aria-current="page" onclick="authenticate()">산책친구 찾기</a>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown"
                                aria-expanded="false">게시판</a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="/share">용품나눔</a></li>
                                <li><a class="dropdown-item" href="/share">나의 펫을 자랑합니다</a></li>
                            </ul>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/hospital">병원 찾기</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/boards/qna">Q&A</a>
                        </li>
                    </ul>
                    <hr class="d-lg-none">

                    <div class="d-lg-none ">
                        <a class="btn btn_my" href="/mypage">마이페이지</a>
                        <button class="btn btn_log" data-bs-toggle="modal" data-bs-target="#exampleModal-log"
                            id="loginBtnSmall" type="button">로그인</button>
                        <button class="btn btn_log" id="logoutBtnSmall" type="button" onclick="logout()">로그아웃</button>
                    </div>

                    <div class="myLog d-none d-lg-flex"> <!-- Only display on large screens -->
                        <a class="btn btn_my" href="/mypage">마이페이지</a>
                        <button class="btn btn_log" data-bs-toggle="modal" data-bs-target="#exampleModal-log"
                            id="loginBtnLarge" type="button">로그인</button>
                        <button class="btn btn_log" id="logoutBtnLarge" type="button" onclick="logout()">로그아웃</button>
                    </div>

                </div>
            </div>
        </nav>

        <div class="modal fade" id="exampleModal-log" tabindex="-1" aria-labelledby="exampleModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content" style="background-color: #F4E0D6;">
                    <div class="modal-header text-center">
                        <div class="modal-title fs-5" id="exampleModalLabel">로그인</div>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="login-form">
                            <div class="mb-3">
                                <label for="userid" class="form-label">아이디</label>
                                <input type="text" class="form-control" id="userid" style="background-color: #F4E0D6;"
                                    value="user1">
                            </div>
                            <div class="mb-3">
                                <label for="pw" class="form-label">비밀번호</label>
                                <input type="password" class="form-control" id="pw" style="background-color: #F4E0D6;"
                                    value="user1">
                            </div>
                            <div class="text-center">
                                <button type="button" class="btn btn-primary" onclick="signin()"
                                    style="background-color:#DBC2BD; border: none;">로그인</button>
                                <button type="button" class="btn btn-primary" onclick="signup()"
                                    style="background-color:#DBC2BD; border: none;">회원가입</button>
                                <button type="button" class="btn btn-secondary me-3" data-bs-dismiss="modal"
                                    style="background-color:#DBC2BD; border: none;">Close</button> <!-- 회원가입 버튼 추가 -->
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <script src="/js/header.js"></script>
    <!-- -------------------------산책 메이트 찾기--------------------------- -->
    <main>

        <div id="page-wrapper container-md">
            <img id="dogSearchIMG" src="/images/dogsearch.png" />
            <section>
                <!-- ------------------------------ -->
                <!-- find-mate-wrapper -->
                <div id="find-mate-wrapper" class="container-md">
                    <p>같은 동네에서 산책 메이트를 찾아보세요!</p>
                    <div id="find-mate-fieldset-container" class="row row-cols-2 row-cols-lg-4 g-2">
                        <div class="col">
                            <fieldset class="field">
                                <legend>견종 크기</legend>
                                <form name="form-type">
                                    <input type="radio" name="type" value="small" id="small" data-description="소형견" />
                                    <label for="small">소형</label>
                                    <input type="radio" name="type" value="medium" id="medium" data-description="중형견" />
                                    <label for="medium">중형</label>
                                    <input type="radio" name="type" value="large" id="large" data-description="대형견" />
                                    <label for="large">대형</label>
                                </form>
                            </fieldset>
                        </div>
                        <div class="col">
                            <fieldset class="field">
                                <legend>견종 성격</legend>
                                <form name="form-character">
                                    <input type="radio" name="character" value="introvert" id="introvert"
                                        data-description="소심한" />
                                    <label for="introvert">소심</label>
                                    <input type="radio" name="character" value="extrovert" id="extrovert"
                                        data-description="활발한" />
                                    <label for="extrovert">활발</label>
                                </form>
                            </fieldset>
                        </div>
                        <div class="col">
                            <fieldset class="field">
                                <legend>산책 시간 (분)</legend>
                                <form name="form-walkingTime">
                                    <input type="radio" name="walkingTime" value="60" id="60" data-description="60분" />
                                    <label for="60">60</i></label>
                                    <input type="radio" name="walkingTime" value="90" id="90" data-description="90분" />
                                    <label for="90">90</label>
                                    <input type="radio" name="walkingTime" value="120" id="120"
                                        data-description="120분" />
                                    <label for="120">120</i></label>
                                </form>

                            </fieldset>
                        </div>
                        <div class="col">
                            <fieldset class="field">
                                <legend>산책 장소</legend>
                                <form name="form-walkingLocation">
                                    <input type="radio" name="walkingLocation" value="indoor" id="indoor"
                                        data-description="실내" />
                                    <label for="indoor">실내</label>
                                    <input type="radio" name="walkingLocation" value="outdoor" id="outdoor"
                                        data-description="실외" />
                                    <label for="outdoor">실외</label>
                                </form>
                            </fieldset>
                        </div>

                    </div>
                    <div id="find-mate-search-container">
                        <div id="search-btn-container">
                            <button type="button" onclick="search()" id="search-btn" class="btn btn-success">찾기</button>
                        </div>
                    </div>
                </div>
                <!-- ------------------------------------ -->
                <!-- found-mate-wrapper -->
                <div id="found-mate-wrapper">


                    <div id="search-filter"></div>

                    <div id="searching-ui">
                        <div id="searching-message">산책메이트를 찾는중이에요</div>

                        <div class="spinner-border spinner-grow spinner-grow mx-auto d-flex justify-content-center"
                            style="width: 1.2rem; height: 1.2rem;" role="status" aria-hidden="true">
                        </div>

                        <button type="button" onclick="cancelSearch()" id="cancelSearch"
                            class="btn btn-sm btn-outline-danger mx-auto d-block">취소</button>
                    </div>


                    <div id="found-users">조회되는 산책메이트들</div>
                    <ul id="mate-list">

                    </ul>
                </div>
            </section>
        </div>
    </main>

    <!-- -------------------------------------------------------------------------- -->
    <div id="chat-container">
        <input type="checkbox" id="click" />
        <label for="click">
            <i class="bi bi-chat-fill open-chat"></i>
            <i class="bi bi-x-lg close-chat"></i>
        </label>
        <div class="chat-wrapper">
            <div class="chat-header">
                <div class="chat-header-friends">친구 목록</div>
                <div class="chat-header-room"></div>
            </div>
            <div class="chat-friends"></div>
            <div class="chat-container">
                <div class="chat-room">

                </div>
                <div class="chat-input">
                    <textarea id="message" name="message" onkeydown="handleEnter(event)"></textarea>
                    <button id="send-message"><i class="bi bi-send-fill"></i></button>
                </div>
            </div>
            <div class="empty-chat-room">
                <div>대화할 친구를 좌측에서 선택해주세요.</div>
            </div>
        </div>

    </div>
    </div>


</body>

<!-- ========================================================================================== -->
<!-- ========================================================================================== -->

<!-- ========================================================================================== -->

<!-- ========================================================================================== -->

<!-- ========================================================================================== -->

<!-- ========================================================================================== -->

<!-- ========================================================================================== -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
    crossorigin="anonymous"></script>
<script>
    //아이디 담길 변수 선언
    let myID;
    let otherID;


    const findMateWrapper = document.querySelector('#find-mate-wrapper');
    const foundMateWrapper = document.querySelector('#found-mate-wrapper');

    //아이디 입력 요소
    const id = document.querySelector('#userid');

    //찾기 조건 담길 변수 선언
    let filter;
    let myLocation;
    let myProfile;
    let myName;
    //소켓 연결
    const socket = io();
    // token 유효성 검사
    (async function () {
        try {
            //로컬 스토리지에서 'token' 이름의 아이템 불러오기
            const token = window.localStorage.getItem('token');
            const res = await axios.post('/mate/auth', null, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            myID = res.data.userinfo.userid;
            myLocation = res.data.userinfo.address;
            myProfile = res.data.userinfo.profile;
            myName = res.data.userinfo.name;
            console.log('myUserInfo', res.data.userinfo);
            socket.emit('getChatList', myID);
        } catch (error) {
            window.localStorage.removeItem('token');
            alert('로그인 해주세요');
            document.location.href = '/';
        }
    })();

    function handleEnter(event) {
        if (event.keyCode == 13 && event.shiftKey == false) {
            const sendMessageButton = document.querySelector('#send-message');
            sendMessageButton.click();
        }
    }
    function signup() {
        window.location.href = "/signup";
    }

    // 대화목록 보여주기
    function showChatList(chatList) {
        // chatList => [ {roomid:'', users:['userid','userid'] }, ... ]

        // chatList => [ {roomid:'', users:[{userid: 'string', profile: 'string'}, ...] }, ... ]

        // [{roomid: roomid, users: [{user: user, name: name, profile: profile}]}]

        const chatFriendsContainer = document.querySelector('.chat-friends');
        chatFriendsContainer.innerHTML = '';

        chatList.forEach((room) => {
            const roomID = room.roomid;
            const [friend] = room.users.filter((user) => user.userid != myID);
            console.log('mate', friend);

            const friendDiv = document.createElement('div');
            friendDiv.classList.add('chat-friend');
            let HTML;

            if (friend) {

                HTML = `<img class="chat-friend-profile" src="${friend.profile}" />
                        <span class="chat-friend-name" onclick="enterChat('${roomID}','${friend.userid}','${friend.name}','${friend.profile}')">${friend.name}</span>
                        <i class="bi bi-x-lg delete-friend-button" onclick="leaveChat('${roomID}','${friend.userid}')"></i>`;
            } else {
                HTML = `<img class="chat-friend-profile" src="/images/default.png" />
                        <span class="chat-friend-name" onclick="enterChat('${roomID}','','','')">unknown</span>
                        <i class="bi bi-x-lg delete-friend-button" onclick="leaveChat('${roomID}','')"></i>`;
            }

            friendDiv.innerHTML = HTML;
            friendDiv.dataset.roomID = roomID;
            chatFriendsContainer.appendChild(friendDiv);
        });



    }

    // HTML 채팅방 만드는 함수
    function createChatRoom(chatRoomInfo) {
        const { myID, otherID, roomID, messages, otherName, otherProfile } = chatRoomInfo;
        // otherID, roomID
        // messages => [{id, content. senderid, createdAt},...]
        // const reversedMessages = messages.slice().reverse();

        const notification = document.querySelector(`.chat-friend[data-room-i-d='${roomID}'] div`);
        if (notification) {
            notification.remove();
        }

        const emptyChatRoom = document.querySelector('.empty-chat-room');
        emptyChatRoom.style.display = 'none';


        const chatHeaderRoom = document.querySelector('.chat-header-room');
        chatHeaderRoom.textContent = otherName ? `${otherName}님과의 대화` : `unknown님과의 대화`;


        const chatContainer = document.querySelector('.chat-container');
        chatContainer.style.display = 'flex';
        chatContainer.dataset.roomID = roomID;

        const chatRoom = document.querySelector('.chat-room');
        chatRoom.innerHTML = '';

        const sendMessageButton = document.querySelector('#send-message');

        let referenceDate = '';
        let referenceTime = '';
        if (messages.length > 0) {

            messages.forEach((message, index) => {
                const date = dayjs(message.createdAt).format('YYYY년 MM월 DD일');
                const time = dayjs(message.createdAt).format('YYYY-MM-DDTh:mma');
                console.log(time.split('T')[1]);
                const sender = message.senderid;

                const bubble = document.createElement('div');
                bubble.classList.add('bubble');
                bubble.textContent = message.content;
                if (myID != sender) {
                    bubble.classList.add('you');
                } else {
                    bubble.classList.add('me');
                }
                bubble.dataset.senderid = sender;

                if (index > 0 && index < messages.length && referenceTime == time && messages[index - 1].senderid == message.senderid) {
                    console.log('deleted lastTimestamp');
                    const allTimestampsDivs = document.querySelectorAll('.timestamp');
                    console.log(allTimestampsDivs);
                    const lastTimestampDiv = allTimestampsDivs[allTimestampsDivs.length - 1];
                    lastTimestampDiv.remove();
                };

                const timestamp = document.createElement('span');
                timestamp.classList.add('timestamp');
                timestamp.textContent = time.split('T')[1];
                referenceTime = time;
                bubble.dataset.timestamp = message.createdAt;
                bubble.append(timestamp);

                if (date != referenceDate) {
                    const dateIndicator = document.createElement('div');
                    dateIndicator.classList.add('date-indicator');
                    referenceDate = date;
                    dateIndicator.textContent = date;
                    dateIndicator.dataset.date = dayjs(message.createdAt).format('YYYY-MM-DD');
                    chatRoom.append(dateIndicator);
                }

                chatRoom.append(bubble);
            });
        }
        chatRoom.scrollTop = chatRoom.scrollHeight - chatRoom.clientHeight;
        sendMessageButton.setAttribute('onclick', `sendMessage('${otherID}', '${roomID}')`);
        if (otherID == '') {
            sendMessageButton.disabled = true;
        }
    }

    //대화방 입장 onclick
    async function enterChat(roomID, otherID, otherName, otherProfile) {
        console.log(roomID, otherID);
        const data = {
            myID: myID,
            otherID,
            roomID,
            otherName,
            otherProfile,
        };
        await socket.emit('fetchChatRoomData', data);
    }

    //대화방 입장시
    socket.on('openChatRoom', (chatRoomInfo) => {
        const { myID, otherID, roomID, messages, otherName, otherProfile } = chatRoomInfo;
        console.log('messages', messages);
        // messages => [{id, content. senderid, createdAt},...]
        createChatRoom(chatRoomInfo);
    });

    async function sendMessage(otherID, roomID) {
        const content = document.querySelector('#message').value;

        if (content.trim() == '') {
            return;
        }
        const data = {
            myID,
            otherID,
            roomID,
            content
        };
        await socket.emit('message', data);
    }

    socket.on('newMessage', (msgData) => {
        const { senderID, receiverID, roomID, message, createdAt } = msgData;
        const chatContainer = document.querySelector('.chat-container');
        if (roomID != chatContainer.dataset.roomID) {
            appendNotification(roomID, message);
            return;
        }


        appendChatMessage(senderID, roomID, message, createdAt);






    });

    function appendChatMessage(senderID, roomID, message, createdAt) {
        const chatRoom = document.querySelector('.chat-room');

        const messageTimestamp = dayjs(createdAt).format('YYYY-MM-DDTh:mma');
        const messageTime = messageTimestamp.split('T')[1];
        const messageDate = messageTimestamp.split('T')[0];


        const chatBubbles = document.querySelectorAll('.bubble');
        let lastChatBubble;
        let lastChatBubbleTimestamp;
        let lastChatBubbleDate;
        let lastChatBubbleTime;
        if (chatBubbles.length > 0) {
            lastChatBubble = chatBubbles[chatBubbles.length - 1];
            lastChatBubbleTimestamp = dayjs(lastChatBubble.dataset.timestamp).format('YYYY-MM-DDTh:mma');
            lastChatBubbleDate = lastChatBubbleTimestamp.split('T')[0]; lastChatBubbleTime = lastChatBubbleTimestamp.split('T')[1];
        }


        const chatBubble = document.createElement('div');
        chatBubble.dataset.timestamp = createdAt;
        chatBubble.classList.add('bubble');
        chatBubble.textContent = message;
        if (myID == senderID) {
            chatBubble.classList.add('me');
        } else {
            chatBubble.classList.add('you');
        }
        chatBubble.dataset.senderid = senderID;

        if (chatBubbles.length > 0 && messageDate != lastChatBubbleDate) {
            const dateIndicator = document.createElement('div');
            dateIndicator.classList.add('date-indicator');
            dateIndicator.textContent = dayjs(createdAt).format('YYYY년 MM월 DD일');
            dateIndicator.dataset.date = dayjs(createdAt).format('YYYY-MM-DD');
            chatRoom.append(dateIndicator);
        }

        const allTimestamps = document.querySelectorAll('.timestamp');
        const lastTimestampSpan = allTimestamps[allTimestamps.length - 1];
        const lastTimestamp = lastTimestampSpan.textContent;
        if (allTimestamps.length > 0 && lastTimestamp == messageTime && lastChatBubble.dataset.senderid == senderID) {
            lastTimestampSpan.remove();
        }

        const timestamp = document.createElement('span');
        timestamp.classList.add('timestamp');
        timestamp.textContent = messageTime;
        chatBubble.appendChild(timestamp);


        chatRoom.appendChild(chatBubble);
        chatRoom.scrollTop = chatRoom.scrollHeight - chatRoom.clientHeight;
        document.querySelector('#message').value = '';
    }

    function appendNotification(roomID, message) {
        const room = document.querySelector(`.chat-friend[data-room-i-d='${roomID}']`);
        if (room.children.length > 3) {
            const notification = document.querySelector(`.chat-friend[data-room-i-d='${roomID}'] div`);
            notification.textContent = Number(notification.textContent) + 1;
        } else {
            const notification = document.createElement('div');
            notification.textContent = 1;
            room.appendChild(notification);
        }
        console.log(`${roomID} : ${message}`);

    }

    //clientList중 하나를 클릭하고 나와 다른 사용자의 고유한 roomid를 새로 할당받는다
    socket.on('openNewChatRoom', (roomInfo) => {
        const { roomID, otherID, myID, otherName, otherProfile } = roomInfo;
        const data = {
            myID: myID,
            otherID: otherID,
            roomID: roomID,
            otherName,
            otherProfile
        };
        const chatButton = document.querySelector('#click');
        chatButton.checked = true;
        console.log('open new');

        socket.emit('getChatList', myID);
        socket.emit('fetchChatRoomData', data);
    });

    //clientList중 하나를 클릭 =
    socket.on('openExistingChatRoom', (roomInfo) => {
        const { roomID, otherID, myID, otherName, otherProfile } = roomInfo;
        const data = {
            myID: myID,
            otherID: otherID,
            roomID: roomID,
            otherName,
            otherProfile
        };
        const chatButton = document.querySelector('#click');
        chatButton.checked = true;
        console.log('open existing');
        socket.emit('getChatList', myID);
        socket.emit('fetchChatRoomData', data);
    });


    //chatList(대화방 목록) 받는 이벤트
    socket.on('chatList', (chatList) => {
        console.log('chatList', chatList);
        showChatList(chatList);
    });

    //대화방 나가기 onclick
    async function leaveChat(roomID, otherID) {
        console.log('leaveChat()');
        const data = {
            myID: myID,
            otherID: otherID,
            roomID: roomID
        };
        await socket.emit('leaveChat', data);
    }

    socket.on('leftChat', (msg) => {
        console.log(msg);
        document.querySelector('.chat-header-room').textContent = '';
        const chatContainer = document.querySelector('.chat-container');
        chatContainer.dataset.roomID = '';
        const chatRoom = document.querySelector('.chat-room');
        chatRoom.innerHTML = '';
        chatContainer.style.display = 'none';
        document.querySelector('.empty-chat-room').style.display = 'flex';
        socket.emit('getChatList', myID);
    });

    //필터조건으로 찾기 버튼 onclick 
    async function search() {
        const allFields = document.querySelectorAll('fieldset');
        const selectedRadio = document.querySelectorAll('input[type="radio"]:checked');

        const type = document.forms['form-type'].type;
        const character = document.forms['form-character'].character;
        const walkingTime = document.forms['form-walkingTime'].walkingTime;
        const walkingLocation = document.forms['form-walkingLocation'].walkingLocation;
        const searchValues = [type, character, walkingTime, walkingLocation];
        // 모든 필드가 선택되지 않을 경우 
        if (selectedRadio.length != allFields.length) {
            alert("모든 조건을 선택해주세요.");
            return;
        }
        // 모든 피드 선택되고, 선택된 조건들의 설명
        for (const form of selectedRadio) {
            const value = form.value;
            const description = form.dataset.description;
            const searchFilterDiv = document.querySelector('#search-filter');
            const filterItemSpan = document.createElement('span');
            filterItemSpan.classList.add('filter');
            filterItemSpan.textContent = `#${description}`;
            searchFilterDiv.appendChild(filterItemSpan);
        }
        filter = `${myLocation}_${type.value}_${character.value}_${walkingTime.value}_${walkingLocation.value}`;

        const data = {
            userid: myID,
            profile: myProfile,
            filter: filter,
            name: myName
        };

        await socket.emit('joinRoom', data);

        findMateWrapper.style.display = 'none';
        foundMateWrapper.style.display = 'block';
    }

    //필터조건으로 찾기 중지 버튼 onclick 
    async function cancelSearch() {
        const foundUsersMessage = document.querySelector('#found-users');
        const searchFilterDiv = document.querySelector('#search-filter');
        searchFilterDiv.innerHTML = '';
        foundUsersMessage.textContent = ``;
        const data = {
            myID: myID,
            filter: filter
        };
        await socket.emit('leaveRoom', data);
        const ul = document.querySelector('#mate-list');
        ul.innerHTML = '';

        findMateWrapper.style.display = 'block';
        foundMateWrapper.style.display = 'none';
    }

    //clientList 받는 이벤트
    socket.on('clientList', (clientList) => {
        console.log('clientList', clientList);
        updateUsers(clientList);
    });

    // HTML 동일조건 사용자들 보여주는 함수
    function updateUsers(clientList) {
        const ul = document.querySelector('#mate-list');
        const foundUsersMessage = document.querySelector('#found-users');
        foundUsersMessage.textContent = `조회되는 산책메이트들 (${clientList.length - 1} 명)`;
        ul.innerHTML = '';
        if (clientList.length > 1) {
            console.log('clientList', clientList);
            clientList.forEach((user) => {
                if (user.userid === myID) {
                    return;
                } else {
                    const li = document.createElement('li');
                    li.classList.add('found-user');
                    li.setAttribute('onclick', `chat('${user.userid}','${user.socketid}')`);

                    const img = document.createElement('img');
                    const div = document.createElement('div');
                    const hr = document.createElement('hr');
                    img.src = user.profile;
                    div.textContent = `${user.name}님`;
                    li.appendChild(img);
                    li.appendChild(hr);
                    li.appendChild(div);
                    ul.appendChild(li);
                }
            });
        }

    }

    //clientList를 받아서 보여준 특정 클라이언트 li태그 onclick
    function chat(otherID, otherSocketID) {
        console.log('chat', otherID, otherSocketID);
        const data = {
            myID: myID,
            otherID: otherID,
            otherSocketID: otherSocketID,
        };
        socket.emit('startChat', data);
    }



</script>

</html>